// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.subsystems;

import org.usfirst.frc5053.FRC2016Stronghold.RobotMap;
import org.usfirst.frc5053.FRC2016Stronghold.commands.*;
import com.ni.vision.NIVision;
import com.ni.vision.NIVision.*;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ImageType;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.vision.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class VisionHandler extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public static final int redLowRange = 0;
	public static final int redHighRange = 0;
	public static final int greenLowRange = 0;
	public static final int greenHighRange = 0;
	public static final int blueLowRange = 0;
	public static final int blueHighRange = 0;
	
	Image sourceFrame;
	Image morphedFrame;
	
	CameraServer camera;
	
	int session;
	
	NIVision.Range redFilter;
	NIVision.Range greenFilter;
	NIVision.Range blueFilter;
	
	public VisionHandler ()
	{
		redFilter = new NIVision.Range(redLowRange, redHighRange);
		greenFilter = new NIVision.Range(greenLowRange, greenHighRange);
		blueFilter = new NIVision.Range(blueLowRange, blueHighRange);
		//RGB Image taken from Camera
		sourceFrame = NIVision.imaqCreateImage(ImageType.IMAGE_RGB, 0);
		
		//Binary Image used to store the RGB filtered Image
		morphedFrame = NIVision.imaqCreateImage(ImageType.IMAGE_U8, 0);
		
		
		
	}
	
	public double getGoalOffset()
	{
		double offset = 0;
		
		//Take a picture from the camera
		updateFrame();
		//We have now stored the most recent image into sourceFrame
		NIVision.imaqWriteBMPFile(morphedFrame, "BaseImage.bmp", 8, NIVision.RGB_BLUE);
		//Apply a color threshold
		//Hint: NIVision.something(a, b, c, d, etc.)
		NIVision.imaqColorThreshold(morphedFrame, sourceFrame, 255, NIVision.ColorMode.RGB, redFilter, greenFilter, blueFilter);
		NIVision.imaqWriteBMPFile(morphedFrame, "Step1.bmp", 8, NIVision.RGB_BLUE);
		
		//Apply a morphology or two
		//Applying imaqDilate() to fill in particles
		NIVision.imaqGrayMorphology(morphedFrame, morphedFrame, NIVision.MorphologyMethod.DILATE, new NIVision.StructuringElement());
		NIVision.imaqWriteBMPFile(morphedFrame, "Step2.bmp", 8, NIVision.RGB_BLUE);
		
		//Applying imaqClose() to finish the particle shape into a rectangle
		NIVision.imaqGrayMorphology(morphedFrame, morphedFrame, NIVision.MorphologyMethod.CLOSE, new NIVision.StructuringElement());
		NIVision.imaqWriteBMPFile(morphedFrame, "Step3.bmp", 8, NIVision.RGB_BLUE);
		
		//Run particle analysis report
		
		//Get the Center_Of_Mass_X of the mass with the highest Y
		
		//Distance Calculation!
		//objAngle = 0.5*((*particles)[number].boundingRect.width)*(CAMERA_ANGLE/(*particles)[number].imageWidth);
		//return 1/tan(objAngle);
		
		//We found it! Now return it to the robot calling this function
		return offset;
	}
	public void updateFrame()
	{
		session = NIVision.IMAQdxOpenCamera("cam0", NIVision.IMAQdxCameraControlMode.CameraControlModeController);
		
		NIVision.IMAQdxStartAcquisition(session);
		NIVision.IMAQdxGrab(session, sourceFrame, 1);
		CameraServer.getInstance().setImage(sourceFrame);
		NIVision.IMAQdxStopAcquisition(session);
		NIVision.IMAQdxCloseCamera(session);	
		
		
	}
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

