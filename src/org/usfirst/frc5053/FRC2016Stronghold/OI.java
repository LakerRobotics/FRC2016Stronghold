// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold;

import org.usfirst.frc5053.FRC2016Stronghold.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc5053.FRC2016Stronghold.subsystems.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */

public class OI {
	//Driver controller
	private static final int A = 1;
	private static final int B = 2;
	private static final int X = 3;
	private static final int Y = 4;
	private static final int leftShoulder = 5;
	private static final int rightShoulder = 6;
	private static final int leftBlackButton = 7;
	private static final int rightBlackButton = 8;
	private static final int leftStickPress = 9;
	private static final int rightStickPress = 10;
	
	//Operator
	private static final int trigger = 1;
	private static final int thumbButton = 2;
	private static final int opBtnR3 = 3;
	private static final int opBtnR4 = 4;
	private static final int opBtnR5 = 5;
	private static final int opBtnR6 = 6;
	private static final int opBtnL7 = 7;
	private static final int opBtnL8 = 8;
	private static final int opBtnL9 = 9;
	private static final int opBtnL10 = 10;
	private static final int opBtnL11 = 11;
	private static final int opBtnL12 = 12;
	
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shooterSlow;
    public JoystickButton driveStrightPID;
    public JoystickButton shooter;
    public JoystickButton shooterOff;
    public JoystickButton spinKickShooter;
    public JoystickButton joystickButton1;
    public JoystickButton kickerDriver;
    public JoystickButton AlignToLowGoalAndShoot;
    public JoystickButton AlignToHighGoalAndShoot;
    public JoystickButton fieldOrientToPOVButtons;
    public Joystick driver;

    public JoystickButton secondShooterSlow;
    public JoystickButton secondDriveStrightPID;
    public JoystickButton secondShooter;
    public JoystickButton secondShooterOff;
    public JoystickButton secondShooterOffSlow;
    public JoystickButton secondSpinKickShooter;
    public JoystickButton secondJoystickButton1;
    public JoystickButton secondKickerDriver;
    public JoystickButton secondAlignToLowGoalAndShoot;
    public JoystickButton secondAlignToHighGoalAndShoot;
    public JoystickButton secondFieldOrientToPOVButtons;

    
    public JoystickButton intakeSpin;
    public JoystickButton intakeSpinOff;
    public JoystickButton intakeReverse;
    public JoystickButton intakeReverseOff;
    public JoystickButton intakeReverseFast;
    public JoystickButton intakeReverseFastOff;
    public JoystickButton scalerReach;
    public JoystickButton armNeutral;
    public JoystickButton armGetBall;
    public JoystickButton armLiftPorticullis;
    public JoystickButton armScale;
    public JoystickButton arcadeArm;
    public JoystickButton shooterIntake;
    public JoystickButton shooterIntakeOff;
    public JoystickButton shooterArticulate;
    public JoystickButton shooterArticulateOverride;
    public JoystickButton shooterArticulateSpin;
    public JoystickButton shooterArticulateSpinOff;
    public Joystick operator;
 
    public JoystickButton secondIntakeSpin;
    public JoystickButton secondIntakeSpinOff;
    public JoystickButton secondIntakeReverse;
    public JoystickButton secondIntakeReverseOff;
    public JoystickButton secondIntakeReverseFast;
    public JoystickButton secondIntakeReverseFastOff;
    public JoystickButton secondScalerReach;
    public JoystickButton secondArmNeutral;
    public JoystickButton secondArmGetBall;
    public JoystickButton secondArmLiftPorticullis;
    public JoystickButton secondArmScale;
    public JoystickButton secondArcadeArm;
    public JoystickButton secondShooterIntake;
    public JoystickButton secondShooterIntakeOff;
 
    public JoystickButton debugForShooterAim;
    public JoystickButton debugForShooterAimPID;
    public Joystick debugJoystick;
    
    public Joystick driverSecondLayout;
    public Joystick operatorSecondLayout;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
        driver = new Joystick(0);
        operator = new Joystick(1);
    	debugJoystick = new Joystick(2);
    	driverSecondLayout = new Joystick(3);
        operatorSecondLayout = new Joystick(4);

        secondArcadeArm = new JoystickButton(operatorSecondLayout, trigger);
        secondArcadeArm.whileHeld(new ArcadeArmControl());
        secondIntakeReverseOff = new JoystickButton(operatorSecondLayout, thumbButton);
        secondIntakeReverseOff.whenReleased(new SpinIntake(0));
        secondIntakeReverse = new JoystickButton(operatorSecondLayout, thumbButton);
        secondIntakeReverse.whileHeld(new ShooterSpinIntake());
        secondIntakeReverseFastOff = new JoystickButton(operatorSecondLayout, opBtnR3);
        secondIntakeReverseFastOff.whenReleased(new SpinIntake(0));
        secondIntakeReverseFast = new JoystickButton(operatorSecondLayout, opBtnR3);
        secondIntakeReverseFast.whileHeld(new ShooterSpinIntakeFast());
        secondIntakeSpinOff = new JoystickButton(operatorSecondLayout, opBtnR4);
        secondIntakeSpinOff.whenReleased(new SpinIntake(0));
        secondIntakeSpin = new JoystickButton(operatorSecondLayout, opBtnR4);
        secondIntakeSpin.whileHeld(new SpinIntake(1));
        secondScalerReach = new JoystickButton(operatorSecondLayout, opBtnR5);
        secondScalerReach.whileHeld(new ScalerReachUp());
        secondArmNeutral = new JoystickButton(operatorSecondLayout, opBtnR6);
        secondArmNeutral.whileHeld(new ArmSetpointsRateControl(0.209));
        secondArmGetBall = new JoystickButton(operatorSecondLayout, opBtnL7);
        secondArmGetBall.whileHeld(new ArmSetpointsRateControl(0.334));
        secondArmLiftPorticullis = new JoystickButton(operatorSecondLayout, opBtnL8);
        secondArmLiftPorticullis.whileHeld(new ArmSetpointsRateControl(0.348));
        secondArmScale = new JoystickButton(operatorSecondLayout, opBtnL9);
        secondArmScale.whileHeld(new ArmSetpointsRateControl(0.209));
        secondShooterIntakeOff = new JoystickButton(operatorSecondLayout, opBtnL10);
        secondShooterIntakeOff.whenReleased(new ShooterSpin(0));
        secondShooterIntake = new JoystickButton(operatorSecondLayout, opBtnL10);
        secondShooterIntake.whileHeld(new ShooterSpin(-1000));
        
        
        /*secondfieldOrientToPOVButtons = new JoystickButton(driverSecondLayout, rightBlackButton);
        secondfieldOrientToPOVButtons.whileHeld(new DriveRotateFieldOrientation());
        secondAlignToLowGoalAndShoot = new JoystickButton(driverSecondLayout, leftShoulder);
        secondAlignToLowGoalAndShoot.whileHeld(new AlignToLowGoalAndShoot());
        secondAlignToHighGoalAndShoot = new JoystickButton(driverSecondLayout, rightShoulder);
        secondAlignToHighGoalAndShoot.whileHeld(new AlignToHighGoalAndShoot());
        secondkickerDriver = new JoystickButton(driverSecondLayout, X);
        secondkickerDriver.whileHeld(new ShooterSpinThenKick(-2000));
        secondshooterOff = new JoystickButton(driverSecondLayout, X);
        secondshooterOff.whenReleased(new ShooterSpin(0));
        secondspinKickShooter = new JoystickButton(driverSecondLayout, Y);
        secondspinKickShooter.whileHeld(new PneumaticsShooterKick());
        secondjoystickButton1 = new JoystickButton(driverSecondLayout, Y);
        secondjoystickButton1.whenReleased(new ShooterSpin(0));
        seconddriveStrightPID = new JoystickButton(driverSecondLayout, B);
        seconddriveStrightPID.whileHeld(new ArcadeDriveStrightPID());
        secondshooterSlow = new JoystickButton(driverSecondLayout, A);
        secondshooterSlow.whileHeld(new ShooterSpinThenKick(-1500));
        secondshooterOffSlow = new JoystickButton(driverSecondLayout, A);
        secondshooterOffSlow.whenReleased(new ShooterSpin(0));*/
    	
        
        
    	secondFieldOrientToPOVButtons = new JoystickButton(driverSecondLayout, rightBlackButton);
        secondFieldOrientToPOVButtons.whileHeld(new DriveRotateFieldOrientation());
        secondAlignToLowGoalAndShoot = new JoystickButton(driverSecondLayout, leftShoulder);
        secondAlignToLowGoalAndShoot.whileHeld(new AlignToLowGoalAndShoot());
        secondAlignToHighGoalAndShoot = new JoystickButton(driverSecondLayout, rightShoulder);
        secondAlignToHighGoalAndShoot.whileHeld(new AlignToHighGoalAndShoot());
        secondKickerDriver = new JoystickButton(driverSecondLayout, X);
        secondKickerDriver.whileHeld(new ScalerReachUp());
        secondJoystickButton1 = new JoystickButton(driverSecondLayout, Y);
        secondJoystickButton1.whenReleased(new ShooterSpin(0));
        //secondspinKickShooter = new JoystickButton(driverThirdLayout, Y);
        //secondspinKickShooter.whileHeld(new PneumaticsShooterKick());
        secondShooterOff = new JoystickButton(driverSecondLayout, A);
        secondShooterOff.whenReleased(new ShooterSpin(0));
        secondShooter = new JoystickButton(driverSecondLayout, Y);
        secondShooter.whileHeld(new ShooterSpin(2000));
        secondDriveStrightPID = new JoystickButton(driverSecondLayout, B);
        secondDriveStrightPID.whileHeld(new ArcadeDriveStrightPID());
        secondShooterSlow = new JoystickButton(driverSecondLayout, A);
        secondShooterSlow.whileHeld(new ShooterSpin(-1500));
    	
        
        
    	debugForShooterAim = new JoystickButton(debugJoystick, trigger);
        debugForShooterAim.whileHeld(new ArcadeShooterAimControl());
    	debugForShooterAimPID = new JoystickButton(debugJoystick, thumbButton);
        debugForShooterAimPID.whileHeld(new ShooterAimDebugJoystick());
    	
        
        arcadeArm = new JoystickButton(operator, trigger);
        arcadeArm.whileHeld(new ArcadeArmControl());
        intakeReverseOff = new JoystickButton(operator, thumbButton);
        intakeReverseOff.whenReleased(new SpinIntake(0));
        intakeReverse = new JoystickButton(operator, thumbButton);
        intakeReverse.whileHeld(new ShooterSpinIntake());
        intakeReverseFastOff = new JoystickButton(operator, opBtnR3);
        intakeReverseFastOff.whenReleased(new SpinIntake(0));
        intakeReverseFast = new JoystickButton(operator, opBtnR3);
        intakeReverseFast.whileHeld(new ShooterSpinIntakeFast());
        intakeSpinOff = new JoystickButton(operator, opBtnR4);
        intakeSpinOff.whenReleased(new SpinIntake(0));
        intakeSpin = new JoystickButton(operator, opBtnR4);
        intakeSpin.whileHeld(new SpinIntake(1));
        scalerReach = new JoystickButton(operator, opBtnR5);
        scalerReach.whileHeld(new ScalerReachUp());
        armNeutral = new JoystickButton(operator, opBtnR6);
        armNeutral.whileHeld(new ArmSetpoints(0.209));
        armGetBall = new JoystickButton(operator, opBtnL7);
        armGetBall.whileHeld(new ArmSetpoints(0.334));
        armLiftPorticullis = new JoystickButton(operator, opBtnL8);
        armLiftPorticullis.whileHeld(new ArmSetpoints(0.348));
//        armScale = new JoystickButton(operator, opBtnL9);
//        armScale.whileHeld(new ArmSetpoints(0.209));
//        shooterIntakeOff = new JoystickButton(operator, opBtnL10);
//        shooterIntakeOff.whenReleased(new ShooterSpin(0));
//        shooterIntake = new JoystickButton(operator, opBtnL10);
//        shooterIntake.whileHeld(new ShooterSpin(-750));
        shooterArticulateSpin = new JoystickButton(operator, opBtnL9);
        shooterArticulateSpin.whileHeld(new ShooterSpin(-2750));
        shooterArticulateSpinOff = new JoystickButton(operator, opBtnL9);
        shooterArticulateSpinOff.whenReleased(new ShooterSpin(0));
        shooterArticulateOverride = new JoystickButton(operator, opBtnL10);
        shooterArticulateOverride.whileHeld(new ArcadeArmControl());
        shooterArticulate = new JoystickButton(operator, opBtnL11);
        shooterArticulate.whileHeld(new ShooterAimLimitSwitch(true));
        shooterArticulate = new JoystickButton(operator, opBtnL12);
        shooterArticulate.whileHeld(new ShooterAimLimitSwitch(false));
        
        
        
        
//
        
     //   fieldOrientToPOVButtons = new JoystickButton(driver, rightBlackButton);
       // fieldOrientToPOVButtons.whileHeld(new DriveRotateFieldOrientation());
        //AlignToLowGoalAndShoot = new JoystickButton(driver, leftShoulder);
        //AlignToLowGoalAndShoot.whileHeld(new AlignToLowGoalAndShoot());
        kickerDriver = new JoystickButton(driver, rightShoulder);
        kickerDriver.whileHeld(new ScalerReachUp());
        
        // For reference    	private static final int Y = 4;
        joystickButton1 = new JoystickButton(driver, Y);
        joystickButton1.whenReleased(new ShooterSpin(0));
        spinKickShooter = new JoystickButton(driver, Y);
        spinKickShooter.whileHeld(new PneumaticsShooterKick());

        // For reference    	private static final int B = 2;
        shooterOff = new JoystickButton(driver, B);
        shooterOff.whenReleased(new ShooterSpin(0));
        shooter = new JoystickButton(driver, B);
        shooter.whileHeld(new ShooterSpin(2000));

        // For reference    	private static final int X = 3;
        driveStrightPID = new JoystickButton(driver, X);
        driveStrightPID.whileHeld(new ArcadeDriveStrightPID());

        // For reference    	private static final int A = 1;
        shooterSlow = new JoystickButton(driver, A);
        shooterSlow.whileHeld(new ShooterSpin(-1500));
        
        // SmartDashboard Buttons
        SmartDashboard.putData("ArcadeShooterAimControl", new ArcadeShooterAimControl());
//        SmartDashboard.putData("ShooterAimSetpoints: LowGoal", new ShooterAimSetpoints(0));
//        SmartDashboard.putData("ShooterAimSetpoints: FarLowGoal", new ShooterAimSetpoints(0));
//        SmartDashboard.putData("ShooterAimSetpoints: SetHighGoal", new ShooterAimSetpoints(0));
//        SmartDashboard.putData("RobotCanSee", new RobotCanSee());
        SmartDashboard.putData("AutonSelection", new AutonSelection());
        SmartDashboard.putData("ArmSetpoints: Neutral", new ArmSetpoints(0.209));
        SmartDashboard.putData("ArmSetpoints: GetBall", new ArmSetpoints(0.334));
        SmartDashboard.putData("ArmSetpoints: LiftPorticullis", new ArmSetpoints(0.348));
        SmartDashboard.putData("ArmSetpoints: Scale", new ArmSetpoints(0.209));
        SmartDashboard.putData("ArmSetpoints: AutonPos", new ArmSetpoints(0.300));
        SmartDashboard.putData("ArcadeArmControl", new ArcadeArmControl());
        SmartDashboard.putData("Auton: LowBarLefGoal", new Auton(1, "Left", "Low"));
        SmartDashboard.putData("Auton: LowBarRightGoal", new Auton(1, "Right", "Low"));
        SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());
        SmartDashboard.putData("ArcadeDriveStraight", new ArcadeDriveStraight());
        SmartDashboard.putData("ArcadeDriveStrightPID", new ArcadeDriveStrightPID());
        SmartDashboard.putData("DriveForward: default", new DriveForward(50));
        SmartDashboard.putData("DriveSpin", new DriveSpin());
        SmartDashboard.putData("SpinIntake: Forward", new SpinIntake(1));
        SmartDashboard.putData("SpinIntake: Reverse", new SpinIntake(-0.5));
        SmartDashboard.putData("SpinIntake: Stop", new SpinIntake(0));
        SmartDashboard.putData("SpinIntake: ReverseFast", new SpinIntake(-1));
        SmartDashboard.putData("SquareDrive", new SquareDrive());
        SmartDashboard.putData("ScalerReachUp", new ScalerReachUp());
//        SmartDashboard.putData("KickBall", new KickBall());
        SmartDashboard.putData("ShooterSpin: Default", new ShooterSpin(2000));
        SmartDashboard.putData("ShooterSpin: Off", new ShooterSpin(0));
        SmartDashboard.putData("ShooterSpin: Intake", new ShooterSpin(-750));
        SmartDashboard.putData("ShooterSpin: SlowShoot", new ShooterSpin(-500));
        SmartDashboard.putData("CrossRoughTerrain: forward", new CrossRoughTerrain(1));
        SmartDashboard.putData("CrossRockWall: forward", new CrossRockWall(1));
        SmartDashboard.putData("CrossRamparts: forward", new CrossRamparts(1));
        SmartDashboard.putData("CrossMoat: forward", new CrossMoat(1));
        SmartDashboard.putData("CrossLowBar: forward", new CrossLowBar(1));
        SmartDashboard.putData("CrossDrawbridge: forward", new CrossDrawbridge(1));
        SmartDashboard.putData("CrossPorticullis: forward", new CrossPorticullis(1));
        SmartDashboard.putData("CrossChevalDeFrise: forward", new CrossChevalDeFrise(1));
 //       SmartDashboard.putData("LowBarAuton", new LowBarAuton());
 //       SmartDashboard.putData("KickOff", new KickOff());
 //       SmartDashboard.putData("PneumaticsShooterKick", new PneumaticsShooterKick());
        SmartDashboard.putData("ShooterSpinIntake", new ShooterSpinIntake());
        SmartDashboard.putData("TestDrive10Ft", new TestDrive10Ft());
        SmartDashboard.putData("DriveStraighToTarget", new DriveStraighToTarget());
        SmartDashboard.putData("DriveRotateFieldOrientation", new DriveRotateFieldOrientation());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putData("VisionAlignForLowGoalShot", new VisionAlignForLowGoalShot());
        SmartDashboard.putData("VisionAlignForHighGoalShot", new VisionAlignForHighGoalShot());
        SmartDashboard.putData("AlignToLowGoalAndShoot", new AlignToLowGoalAndShoot());
        SmartDashboard.putData("AlignToHighGoalAndShoot", new AlignToHighGoalAndShoot());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getOperator() {
        return operator;
    }
    
    public Joystick getDebugJoystick() {
    	return debugJoystick;
    }

    public Joystick getDriverSecondLayout() {
    	return driverSecondLayout;
    }
    
    public Joystick getOperatorThirdLayout() {
    	return operatorSecondLayout;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

