// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.commands;

import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5053.FRC2016Stronghold.RobotDriveArcadeStraightPIDOutput;
import org.usfirst.frc5053.FRC2016Stronghold.MotionControlHelper;
import org.usfirst.frc5053.FRC2016Stronghold.MotionControlPIDController;
import org.usfirst.frc5053.FRC2016Stronghold.Robot;
import org.usfirst.frc5053.FRC2016Stronghold.RobotMap;
import org.usfirst.frc5053.FRC2016Stronghold.RobotDriveSpinPIDOutput;

/**
 *
 */
public class ArcadeDriveStrightPID extends Command {
	double targetAngle = 0; // temp real value calculated below

    double     ramp =  90; //degrees
    double maxspeed = 10.0*(360/60) ; //60/360 converts the first numbers which is in RPM to degrees/second
    double   rampUp =   180; //degrees, temp real one will be 180 degrees offset.
    MotionControlHelper rotationSpeedProfile; 
    
    final double Kp = 1d/200; // so at denominator off in the spin-Rate the power will reach the max
    final double Ki = 0.0005;
    final double Kd = 0.0;
    MotionControlPIDController rotationSpeedPID;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ArcadeDriveStrightPID() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        double start = RobotMap.gyroToUse.getAngle();
		targetAngle = start;
		rampUp = start +180;
        rotationSpeedProfile = new MotionControlHelper(targetAngle, ramp, maxspeed, rampUp, (PIDSource) RobotMap.gyroToUse,new RobotDriveArcadeStraightPIDOutput());
        rotationSpeedPID = new MotionControlPIDController(Kp,Ki,Kd, rotationSpeedProfile );
    	    rotationSpeedPID.setOutputRange(-1.0, 1.0);
    	    rotationSpeedPID.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// Some debug print, actual control is going in in the PID thread
    	double currentAngle = RobotMap.gyroToUse.getAngle();
        SmartDashboard.putNumber("ArcadeDriveStraightPID angle",currentAngle);
        SmartDashboard.putNumber("ArcadeDriveStraightPID targetAngle",targetAngle);
        SmartDashboard.putNumber("ArcadeDriveStraightPID Gyro Rate",RobotMap.gyroToUse.getRate());
        SmartDashboard.putNumber("ArcadeDriveStraightPID Gryro Target Rate",rotationSpeedProfile.getTargetSpeed(currentAngle));

    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	rotationSpeedPID.disable();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	rotationSpeedPID.disable();
    	end();
    }
}
