// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.commands;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.command.Command;
//import edu.wpi.first.wpilibj.
import org.usfirst.frc5053.FRC2016Stronghold.Robot;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

/**
 *
 */
public class VisionDefault extends Command {
    int countToTakePicture = 20;
    int currentCountToTakePicture = 0;
    CameraServer cameraServer ;
//	USBCamera usbCamera ;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public VisionDefault() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.visionHandler);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
      //  Robot.camera.startAutomaticCapture("cam0");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//manageTakingPictures();
    }
	private void manageTakingPictures() {
		boolean takePicture = false;
        if(currentCountToTakePicture == countToTakePicture){
        	takePicture = true;
    	}
    	else if(currentCountToTakePicture <= countToTakePicture){
    		currentCountToTakePicture++;
    	} else {
    		currentCountToTakePicture = 0;
    	}

        if (takePicture){
        	int session;
        	session = NIVision.IMAQdxOpenCamera("cam0",NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        	NIVision.IMAQdxStartAcquisition(session);
        	Image frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
        	NIVision.imaqSetImageSize(frame, 320, 240); //image, height, width 640x480, 320x240, 160x120 //TODO make sure it works and dosn't crash things
        	NIVision.IMAQdxGrab(session, frame, 10);
//        	cameraServer.getInstance().setImage(frame);
        	NIVision.IMAQdxStopAcquisition(session);
        	NIVision.IMAQdxCloseCamera(session);

        	// from cheifdelphi Program crashes with out of memory issue if we remove this line
        	frame.free();
        }
	}

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
