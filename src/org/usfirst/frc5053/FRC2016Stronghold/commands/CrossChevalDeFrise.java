// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5053.FRC2016Stronghold.RobotMap;
import org.usfirst.frc5053.FRC2016Stronghold.subsystems.*;

/**
 *
 */
public class CrossChevalDeFrise extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public CrossChevalDeFrise(int direction) {
    	System.out.println("CrossChevalDeFrese Entered");

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    	
   /* 	addSequential(new DriveForward(
    			Navigation.distanceAutoLineToEdgeofDefense
    			-(Navigation.robotLength + Navigation.robotBumperThickness), 6, 28)); //Distance, speed (ft/sec), ramp/rampdown
    			*/
    	addSequential(new DriveForward(8 + 16, 2, 4)); //Distance (inches), speed (ft/sec), ramp/rampdown
    	addSequential(new AutonArmSetpoints(AutonArmSetpoints.FULL_DOWN, 3));//(Setpoint, Delay)
    	addParallel(new AutonArmSetpoints(AutonArmSetpoints.FULL_DOWN, 3));//(Setpoint, Delay)
    	SmartDashboard.putNumber("AutonPotValue", RobotMap.armArmStringPot.get());
    	addParallel(new DriveForward(86, 4, 28)); //Distance (input inches), speed (ft/sec), ramp/rampdown
    	
    	
    	
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    } 
}
