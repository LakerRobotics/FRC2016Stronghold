// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5053.FRC2016Stronghold.subsystems.*;

/**
 *
 */
public class AutonSelection extends CommandGroup {

	public static int LOW_BAR         = 0;
	public static int ROCK_WALL       = 1;
	public static int ROUGH_TERRAIN   = 2;
	public static int CHEVAL_DE_FRISE = 3; 
	public static int PORTICULLIS     = 4;
	public static int MOAT            = 5;
	public static int RAMPARTS        = 6;
	public static int SALLY_PORT      = 7;
	public static int DRAWBRIDGE      = 8;
	
	public static int LEFT_GOAL   = -1;
    public static int CENTER_GOAL =  0;
	public static int RIGHT_GOAL  =  1;
	
	public static int LOW_GOAL = -1;
	public static int HIGH_GOAL = 1;
	
	int m_StartPosition = 1;
	int m_Defense      = LOW_BAR;
	int m_GoalSide     = LEFT_GOAL;
	int m_GoalHeight   = LOW_GOAL;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonSelection() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    //Pulls Starting Position as an integer from the front end dashboard
    //Pulls Defense as a String from the front end dashboard
    	    	
		switch (m_StartPosition) {
			case 1: 
				addSequential(new AutonPosition1()); 
				break;
			case 2: 
				addSequential(new AutonPosition2());
				break;
				
		/*	case 3: 
				x = 2.5*fieldDefenseWidth; y= autonLine + robotLength/2 -robotBumperThickness; 
				break;
			case 4: 
				x = 3.5*fieldDefenseWidth; y= autonLine + robotLength/2 -robotBumperThickness; 
				break;
			case 5: 
				x = 4.5*fieldDefenseWidth; y= autonLine + robotLength/2 -robotBumperThickness; 
				break;*/
		}
    	
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    }
 public void setAuton(int startPosition, int defense, int goalSide, int goalHeight){
	 m_StartPosition = startPosition;
	 m_Defense = defense;
	 m_GoalSide = goalSide;
	 m_GoalHeight = goalHeight;
 }
  // } 

}
