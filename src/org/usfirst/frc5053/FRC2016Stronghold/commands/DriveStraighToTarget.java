// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5053.FRC2016Stronghold.Robot;
import org.usfirst.frc5053.FRC2016Stronghold.RobotMap;

import com.analog.adis16448.frc.ADIS16448_IMU;

/**
 *
 */
public class DriveStraighToTarget extends ArcadeDriveStrightPID{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveStraighToTarget() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	//Tempsuper(Robot.visionHandler.getGoalOffset());
    	this.maxspeed= 10.0*(360/60);
    	this.ramp = 10;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
//    protected void initialize() {
//    	super();
//    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putNumber("IMU_X_Axis", RobotMap.IMU.getAngleX());
//    	SmartDashboard.putNumber("IMU_Y_Axis", Robot.imuBoard.getAngleY());
//    	SmartDashboard.putNumber("IMU_Z_Axis", Robot.imuBoard.getAngleZ());
    	
    	double targetOffset = Robot.visionHandler.getGoalOffset();
    	double start = RobotMap.gyroToUse.getAngle();
    	
    	//Tempm_targetAngle = start + targetOffset;
    	//Tempthis.rotationSpeedProfile.setTargetDistance(m_targetAngle);
    	     	
    	
    	//Tempdouble distance = Robot.visionHandler.getDistance();
    	//Tempdouble shooterSpeed = getShooterSpeed(distance);
    	//Tempdouble shooterAngle = getShooterAngle(distance);
    }

    // Make this return true when this Command no longer needs to run execute()
 //UseParent   protected boolean isFinished() {
 //UseParent       return false;
 //UseParent   }

    // Called once after isFinished returns true
 //UseParent   protected void end() {
 //UseParent   }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
	public double getShooterSpeed(double distance) {
		if(distance < 4) {
            return 800;
		}
		else if(distance > 7) {
			return 2500;
		}
		else {
			return 800 + (distance*566.667);
		}
	}

	public double getShooterAngle(double distance) {
		if(distance < 4) {
            return -1.3677 * (distance * distance) + (0.6361 * distance) + 86.144;

		}
		else if(distance > 7) {
			return 0.0829 * (distance * distance) - (3.7229 * distance) + 65.48;
		}
		else {
			return 1.3106 * (distance * distance) - (21.546 * distance) + 131.45;
		}
	}

}
