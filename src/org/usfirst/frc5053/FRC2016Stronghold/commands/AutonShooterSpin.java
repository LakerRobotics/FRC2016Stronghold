// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5053.FRC2016Stronghold.Robot;
import org.usfirst.frc5053.FRC2016Stronghold.RobotMap;

/**
 *
 */
public class AutonShooterSpin extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_setpoint;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonShooterSpin(double setpoint, double timeMax) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	this.setTimeout(timeMax);// maximum time to wait for shooter to spin up, useful if running on Lil Geek (Program test robot)
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_setpoint = setpoint;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
//        requires(Robot.rightShooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
 //       requires(Robot.leftShooter);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
        Robot.rightShooter.enable();
        Robot.rightShooter.setSetpoint(m_setpoint);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
        Robot.leftShooter.enable();
        Robot.leftShooter.setSetpoint(m_setpoint);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putDouble("ShooterSpin Left Encoder", RobotMap.leftShooterLeftShooterWheelEncoder.getRate());
    	SmartDashboard.putDouble("ShooterSpin Left Motor", RobotMap.leftShooterLeftShooterMotor.get());

    	SmartDashboard.putDouble("ShooterSpin Right Encoder", RobotMap.rightShooterRightShooterWheelEncoder.getRate());
    	SmartDashboard.putDouble("ShooterSpin Right Motor", RobotMap.rightShooterRightShooterMotor.get());
    	//RobotMap.rightShooterRightShooterMotor.set(m_setpoint/5);
    	//RobotMap.leftShooterLeftShooterMotor.set(-m_setpoint/5);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	// This stupid autogenerated code is going to come back every time 
    	// something new is added in robotbuilder. I don't know how we can
    	// permanently get rid of it. All that's needed is return false.
    	// Just comment out return Robot.rightShooter.onTarget()
    	//
    	//    Rich Topolewski
    	//     I changed in robotbuilder to just be a command, 
    	//     not a setpoint command to fix this
    	//
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
    	boolean shooterUpToSpeed = false;
    	if(Robot.leftShooter.onTarget() && Robot.rightShooter.onTarget()){
    		shooterUpToSpeed = true;
    	}
    	else{
    		shooterUpToSpeed = false;
    	}
    	
    	if(shooterUpToSpeed || this.isTimedOut()){ // UpToSpeed or time out return true
    		return true;
    	}
    	else{
    		return false;
    	} 
 //   	return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	// Turn off PID control and shut down the motors
    	Robot.rightShooter.disable();
    	RobotMap.rightShooterRightShooterMotor.set(0);

    	Robot.leftShooter.disable();
    	RobotMap.leftShooterLeftShooterMotor.set(0);
    }
}
