// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold.commands;

import edu.wpi.first.wpilibj.NamedSendable;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5053.FRC2016Stronghold.MotionControlHelper;
import org.usfirst.frc5053.FRC2016Stronghold.MotionControlPIDController;
import org.usfirst.frc5053.FRC2016Stronghold.Robot;
import org.usfirst.frc5053.FRC2016Stronghold.RobotDriveStraightPIDOutput;
import org.usfirst.frc5053.FRC2016Stronghold.RobotMap;

/**
 *
 */
public class AutonForward extends Command {
	MotionControlPIDController motionControlHelper = null  ;
//TODO    private final PIDController drivePowerPID;
// Use these to get going:
// setSetpoint() -  Sets where the PID controller should move the system
//                  to
// enable() - Enables the PID controller.
double distance = 24; //inches
MotionControlPIDController mcPID;
double targetTolerance = 1 ; //inch

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonForward(double a_distance) {
    	distance = a_distance;
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {{
       	RobotMap.navigationAnalogGyro.reset();
        RobotMap.driveTrainLeftWheelEncoder.reset();
        RobotMap.driveTrainRightWheelEncoder.reset();
        double maxspeed = 200; //in/sec
        double ramp = 24; //inches
        double start = 0; //inches
        RobotMap.driveTrainLeftWheelEncoder.setPIDSourceType(PIDSourceType.kRate);

        MotionControlHelper motionControl = new MotionControlHelper(distance, ramp, maxspeed, start,
        		                                    RobotMap .driveTrainLeftWheelEncoder,new RobotDriveStraightPIDOutput());

        
        final double Kp = 0.02;
        final double Ki = 0.002;
        final double Kd = 0.0;

    	mcPID = new MotionControlPIDController(Kp,Ki,Kd, motionControl );
        mcPID.setAbsoluteTolerance(targetTolerance);
        mcPID.setOutputRange(-1, 1);
        
       }
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {{
  		mcPID.enable();
SmartDashboard.putData((NamedSendable) RobotMap.IMU);
	   double angle = RobotMap.IMU.getAngleZ(); // get current heading
       SmartDashboard.putNumber("angle", angle);
       
       SmartDashboard.putNumber("Left",RobotMap .driveTrainLeftWheelEncoder.getDistance());
       SmartDashboard.putNumber("Right",RobotMap .driveTrainRightWheelEncoder.getDistance());
       SmartDashboard.putNumber("Left Rate",RobotMap .driveTrainLeftWheelEncoder.getRate());
//       SmartDashboard.putNumber("Left Target Rate",targetSpeed);
       SmartDashboard.putNumber("Time",this.timeSinceInitialized());
       System.out.println("Time="+this.timeSinceInitialized()
                         +" encoderDist="+RobotMap .driveTrainLeftWheelEncoder.getDistance()
//                         +" Left Target Rate="+targetSpeed);
);       
            

   }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
