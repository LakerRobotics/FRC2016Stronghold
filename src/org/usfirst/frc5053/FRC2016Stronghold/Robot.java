// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2016Stronghold;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.USBCamera;

import org.usfirst.frc5053.FRC2016Stronghold.commands.*;
import org.usfirst.frc5053.FRC2016Stronghold.subsystems.*;

import com.analog.adis16448.frc.ADIS16448_IMU;
import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ImageType;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.networktables.NetworkTableKeyNotDefined;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {


	
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static VisionHandler visionHandler;
    public static ShooterAim shooterAim;
    public static DriveTrain driveTrain;
    public static LeftShooter leftShooter;
    public static RightShooter rightShooter;
    public static Intake intake;
    public static ScalingExtend scalingExtend;
    public static Arm arm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    int countToTakePicture = 20;
//    int currentCountToTakePicture = 0;
    CameraServer camera ;
//	USBCamera usbCamera ;
//	public static ADIS16448_IMU imuBoard; see RobotMap it is already declared there

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        visionHandler = new VisionHandler();
        shooterAim = new ShooterAim();
        driveTrain = new DriveTrain();
        leftShooter = new LeftShooter();
        rightShooter = new RightShooter();
        intake = new Intake();
        scalingExtend = new ScalingExtend();
        arm = new Arm();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
//		usbCamera = new USBCamera("cam0");
//        Image frame = NIVision.imaqCreateImage(ImageType.IMAGE_RGB, 0);

        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        String robotNameString = "";
        try{
        	robotNameString = SmartDashboard.getString("Robot Name");
        }
        catch(NetworkTableKeyNotDefined e){
     	   System.out.println("Could not find 'Robot Name' in SmartDashboard network table");
        }
        boolean runningOnLilGeek;
        if(robotNameString.equals("Lil Geek")){
     	   runningOnLilGeek = true;
        } 
        else{
     	   runningOnLilGeek = false;
        }
        if(runningOnLilGeek){
            RobotMap.driveTrainLeftWheelEncoder.setDistancePerPulse(0.069439091/2);
            RobotMap.driveTrainRightWheelEncoder.setDistancePerPulse(0.069439091/2);
            SmartDashboard.putString("Robot On","Lil Geek");
        }
        else{
            SmartDashboard.putString("Robot On","Rudy");
        }

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonSelection();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
       camera = CameraServer.getInstance();
       camera.setSize(2/*camera.kSize320x240*/);
//       camera.setImage(Image.SCALE_FAST);
       //camera.setQuality(100);
//       camera.startAutomaticCapture("cam0");
       camera.startAutomaticCapture();
    }

	public static MotionControlPIDController createRotationPIDController(double targetAngle, double start, PIDOutput pidOutput) {
		
	    double     ramp =  30; //degrees
	    double maxspeed = 10.0*(360/60) ; //60/360 converts the first numbers which is in RPM to degrees/second
		
		final double Kp = 1d/200; // so at denominator off in the spin-Rate the power will reach the max
	    final double Ki = 0.0000;
	    final double Kd = 0.0;
	 
	    MotionControlPIDController localRotationSpeedPID;

	    MotionControlHelper rotationSpeedProfile; 
        rotationSpeedProfile = new MotionControlHelper(targetAngle, ramp, maxspeed, start, (PIDSource) RobotMap.gyroToUse, pidOutput);
        localRotationSpeedPID = new MotionControlPIDController(Kp,Ki,Kd, rotationSpeedProfile );
        localRotationSpeedPID.setOutputRange(-1.0, 1.0);
        localRotationSpeedPID.enable();
	    return localRotationSpeedPID;
	}
	
    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
       // navigation.autonomousInit();
    	int startPosition=0 ;
    	try{
    	 startPosition = SmartDashboard.getInt("Start Position");
    	}catch (Exception e){e.printStackTrace();};
    	
    	// What Defense is in front of us?
    	String defenseType = "Low bar";
    	try{
//	    	DefenseNameString = SmartDashboard.getString("Defence Name ");
	    	NetworkTable networkTable = NetworkTable.getTable("SmartDashboard");
	    	String[] defenseNames = networkTable.getStringArray("Defence Name");
	    	defenseType =defenseNames[startPosition]; 
    	}catch (Exception e){e.printStackTrace();};
//	    String DefenseNameString = SmartDashboard.
	    
    	try{
// Should work with newest code running on front dashboard	    
    	switch(startPosition){
    		case 2: defenseType = SmartDashboard.getString("Defence 2"); break;
    		case 3: defenseType = SmartDashboard.getString("Defence 3"); break;
    		case 4: defenseType = SmartDashboard.getString("Defence 4"); break;
    		case 5: defenseType = SmartDashboard.getString("Defence 5"); break;
    	}
    	}catch (Exception e){e.printStackTrace();};
	    System.out.println("Defence Name String = '"+defenseType+"'");

	    int defense = AutonSelection.LOW_BAR;
    	if(defenseType.equals("Rock Wall"    )) {defense = AutonSelection.ROCK_WALL;}
    	if(defenseType.equals("Rough Terrain")) {defense = AutonSelection.ROUGH_TERRAIN;}
    	if(defenseType.equals("Chili Fries" )) {defense = AutonSelection.CHEVAL_DE_FRISE;}
    	if(defenseType.equals("Portcullis"  )) {defense = AutonSelection.PORTICULLIS;}
    	if(defenseType.equals("Moat"         )) {defense = AutonSelection.MOAT;}
    	if(defenseType.equals("Ramparts"     )) {defense = AutonSelection.RAMPARTS;}
    	if(defenseType.equals("Sally Port"   )) {defense = AutonSelection.SALLY_PORT;}
    	if(defenseType.equals("Drawbridge"   )) {defense = AutonSelection.DRAWBRIDGE;}

    	
    	// Are we going for Left Center or Right goal?
    	//-----------------------------------------------------------------------
    	int goalSide = AutonSelection.LEFT_GOAL; // "Goal Position" // TEMP
    	String goalPosition = "";//
    	try{
	    	goalPosition = SmartDashboard.getString("Goal Position"); 
	    	}
    	catch (Exception e){e.printStackTrace();};
    	if(("Right" ).equals(goalPosition))goalSide=AutonSelection.RIGHT_GOAL;
    	if(("Center").equals(goalPosition))goalSide=AutonSelection.CENTER_GOAL;
    	if(("Left"  ).equals(goalPosition))goalSide=AutonSelection.LEFT_GOAL;//Note defaults to Left (orginally assignment) if no valid value provided
    	
    	System.out.println("GoalPosition = '"+goalPosition+"   foalSide='"+goalSide+"'   ");

    	// Are we going for High or Low goal?
    	//-----------------------------------------------------------------------
    	int goalHeight = AutonSelection.NO_GOAL; //"Goal High Low" //TEMP
	    String goalHeightString = "";
    	try {
    		goalHeightString = SmartDashboard.getString("Goal High Low");
    	}
    	catch (Exception e){e.printStackTrace();};
    	System.out.println("GoalHeight = '"+goalHeightString);
    	if(("Low"  ).equals(goalHeightString))goalHeight=AutonSelection.LOW_GOAL;
    	if(("High").equals(goalHeightString))goalHeight=AutonSelection.HIGH_GOAL;
    	
    	if(autonomousCommand instanceof AutonSelection  ){
    		AutonSelection autonSelection =(AutonSelection) autonomousCommand;
    		autonSelection.setAuton(startPosition, defense, goalSide, goalHeight);
    	}
    	System.out.println("GoalHeightString = '"+goalHeightString+"  goalHeight='"+goalHeight+"'    ");
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
  //      manageTakingPictures();
     }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();

    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        // Grab image from USB camera and push out to camera server
        // for smart dashboard display
        // the camera name (ex "cam0") can be found through the roborio web interface
		//RGTemp session = NIVision.IMAQdxOpenCamera("cam0", NIVision.IMAQdxCameraControlMode.CameraControlModeController);
		//RGTemp NIVision.IMAQdxStartAcquisition(session);
		//RGTemp NIVision.IMAQdxGrab(session, sourceFrame, 1);
		//RGTemp CameraServer.getInstance().setImage(sourceFrame);
		//RGTemp NIVision.IMAQdxStopAcquisition(session);
		//RGTemp NIVision.IMAQdxCloseCamera(session);
    	// only run vision system image processing every so many calls, example every once every 10 calls

//        manageTakingPictures();
    }

	/**
	 * 
	 */

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
     }
}
